'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { Brain, Cpu, Network, Zap } from 'lucide-react';

interface AILoadingSpinnerProps {
    message?: string;
    size?: 'small' | 'medium' | 'large';
    className?: string;
}

export const AILoadingSpinner: React.FC<AILoadingSpinnerProps> = ({ 
    message = "AI Processing...", 
    size = 'medium',
    className = ''
}) => {
    const sizeConfig = {
        small: { container: 'w-32 h-32', icon: 'w-4 h-4', text: 'text-sm' },
        medium: { container: 'w-48 h-48', icon: 'w-5 h-5', text: 'text-base' },
        large: { container: 'w-64 h-64', icon: 'w-6 h-6', text: 'text-lg' }
    };

    const config = sizeConfig[size];

    const icons = [Brain, Cpu, Network, Zap];

    return (
        <div className={`flex flex-col items-center justify-center ${className}`}>
            {/* Main spinning container */}\n            <div className={`relative ${config.container} flex items-center justify-center`}>\n                {/* Outer orbital ring */}\n                <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 8, repeat: Infinity, ease: "linear" }}\n                    className="absolute inset-0 border-2 border-cyan-500/30 rounded-full"\n                >\n                    <div className="absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-cyan-400 rounded-full shadow-lg shadow-cyan-400/50" />\n                </motion.div>\n\n                {/* Middle orbital ring */}\n                <motion.div\n                    animate={{ rotate: -360 }}\n                    transition={{ duration: 6, repeat: Infinity, ease: "linear" }}\n                    className="absolute inset-4 border-2 border-purple-500/30 rounded-full"\n                >\n                    <div className="absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-purple-400 rounded-full shadow-lg shadow-purple-400/50" />\n                </motion.div>\n\n                {/* Inner orbital ring */}\n                <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 4, repeat: Infinity, ease: "linear" }}\n                    className="absolute inset-8 border-2 border-pink-500/30 rounded-full"\n                >\n                    <div className="absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-pink-400 rounded-full shadow-lg shadow-pink-400/50" />\n                </motion.div>\n\n                {/* Central brain with pulsing glow */}\n                <motion.div\n                    animate={{ \n                        scale: [1, 1.2, 1],\n                        opacity: [0.8, 1, 0.8]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}\n                    className="relative z-10"\n                >\n                    <div className="absolute inset-0 bg-cyan-400/30 rounded-full blur-xl" />\n                    <Brain className={`${config.icon} text-cyan-400 relative z-10`} />\n                </motion.div>\n\n                {/* Floating AI icons */}\n                {icons.map((IconComponent, index) => {\n                    const angle = (index / icons.length) * 360;\n                    const radius = size === 'large' ? 80 : size === 'medium' ? 60 : 40;\n                    \n                    return (\n                        <motion.div\n                            key={index}\n                            animate={{\n                                rotate: 360,\n                                x: [0, Math.cos((angle * Math.PI) / 180) * radius],\n                                y: [0, Math.sin((angle * Math.PI) / 180) * radius]\n                            }}\n                            transition={{\n                                rotate: { duration: 10 + index, repeat: Infinity, ease: "linear" },\n                                x: { duration: 3 + index * 0.5, repeat: Infinity, repeatType: "reverse", ease: "easeInOut" },\n                                y: { duration: 3 + index * 0.5, repeat: Infinity, repeatType: "reverse", ease: "easeInOut" }\n                            }}\n                            className="absolute"\n                            style={{\n                                left: '50%',\n                                top: '50%',\n                                transform: 'translate(-50%, -50%)'\n                            }}\n                        >\n                            <motion.div\n                                animate={{ \n                                    scale: [0.8, 1.2, 0.8],\n                                    opacity: [0.5, 1, 0.5]\n                                }}\n                                transition={{ \n                                    duration: 2 + index * 0.3, \n                                    repeat: Infinity, \n                                    delay: index * 0.2,\n                                    ease: "easeInOut"\n                                }}\n                            >\n                                <IconComponent className={`${config.icon} text-gray-400`} />\n                            </motion.div>\n                        </motion.div>\n                    );\n                })}\n\n                {/* Data flow particles */}\n                {Array.from({ length: 8 }).map((_, i) => (\n                    <motion.div\n                        key={`particle-${i}`}\n                        animate={{\n                            scale: [0, 1, 0],\n                            opacity: [0, 1, 0],\n                            rotate: 360\n                        }}\n                        transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            delay: i * 0.25,\n                            ease: "easeInOut"\n                        }}\n                        className="absolute w-1 h-1 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-full"\n                        style={{\n                            left: '50%',\n                            top: '50%',\n                            transform: `translate(-50%, -50%) rotate(${i * 45}deg) translateX(${size === 'large' ? '60px' : size === 'medium' ? '45px' : '30px'})`\n                        }}\n                    />\n                ))}\n            </div>\n\n            {/* Loading message */}\n            <motion.div\n                animate={{ opacity: [0.5, 1, 0.5] }}\n                transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}\n                className="mt-6 text-center"\n            >\n                <div className={`${config.text} font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-2`}>\n                    {message}\n                </div>\n                <div className="flex items-center justify-center space-x-1">\n                    {[0, 1, 2].map((i) => (\n                        <motion.div\n                            key={i}\n                            animate={{ scale: [1, 1.5, 1] }}\n                            transition={{\n                                duration: 1.5,\n                                repeat: Infinity,\n                                delay: i * 0.2,\n                                ease: "easeInOut"\n                            }}\n                            className="w-1 h-1 bg-gray-400 rounded-full"\n                        />\n                    ))}\n                </div>\n            </motion.div>\n\n            {/* Neural network background effect */}\n            <div className="absolute inset-0 pointer-events-none">\n                {Array.from({ length: 20 }).map((_, i) => (\n                    <motion.div\n                        key={`neural-${i}`}\n                        animate={{\n                            opacity: [0, 0.3, 0],\n                            scale: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                            duration: 4 + Math.random() * 2,\n                            repeat: Infinity,\n                            delay: Math.random() * 2,\n                            ease: "easeInOut"\n                        }}\n                        className="absolute w-px h-8 bg-gradient-to-b from-transparent via-cyan-400/20 to-transparent"\n                        style={{\n                            left: `${Math.random() * 100}%`,\n                            top: `${Math.random() * 100}%`,\n                            transform: `rotate(${Math.random() * 360}deg)`\n                        }}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};