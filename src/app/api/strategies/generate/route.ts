// PATH: src/app/api/strategies/generate/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../../../lib/auth';
import { PrismaClient } from '@prisma/client';
import { PortfolioService } from '../../../../core/portfolio';
import { OpportunityLogger } from '../../../../core/opportunity-logger';
import { DecisionLogger } from '../../../../core/decision-logger';
import { AgentService } from '../../../../core/agent-service';
import { StrategyOptimizer } from '../../../../core/agents';
import { PaperExecutionService } from '../../../../core/services/ExecutionService';

const prisma = new PrismaClient();

export async function POST() {
    const session = await getServerSession(authOptions);
    if (!session?.user?.name) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    const username = session.user.name;

    try {
        // 1. Surinkti duomenis
        const executionService = new PaperExecutionService();
        const portfolioService = new PortfolioService(username, 'MAIN', executionService);
        const opportunityLogger = new OpportunityLogger(username);
        const decisionLogger = new DecisionLogger(username);

        const trades = await portfolioService.getTradeLogs();
        const missedOpportunities = await opportunityLogger.getLogs();
        const decisionLogs = await decisionLogger.getLogs();

        // 2. Patikrinti, ar pakanka duomenų
        if (trades.length < 10) {
            return NextResponse.json({ error: 'Not enough trading history to generate a strategy. At least 10 trades are required.' }, { status: 400 });
        }

        // 3. Iškviesti agentą
        const agentService = new AgentService();
        const optimizer = new StrategyOptimizer(agentService);
        const analysisResult = await optimizer.analyze(trades, missedOpportunities, decisionLogs);

        if (!analysisResult?.response) {
            throw new Error("StrategyOptimizer agent failed to return a response.");
        }

        // 4. Adaptuoti agento atsakymą
        const responseData = analysisResult.response;
        const analysisSummary = responseData.analysis_summary as string || "No summary provided.";
        const suggestedSettings = responseData.suggested_settings as any;

        const suggestedStrategies = suggestedSettings?.strategies;
        if (!suggestedStrategies || typeof suggestedStrategies !== 'object' || Object.keys(suggestedStrategies).length === 0) {
            throw new Error("AI response did not contain a valid 'strategies' object.");
        }

        // Paimame pirmą strategiją iš pasiūlytų
        const newStrategyKey = Object.keys(suggestedStrategies)[0];
        const newStrategy = suggestedStrategies[newStrategyKey];

        // Suteikiame unikalų pavadinimą
        const newStrategyName = `optimized_strat_${Date.now()}`;
        newStrategy.strategy_name = `AI Optimized v${Math.floor(Date.now() / 1000000)}`;
        newStrategy.description = `Generated by AI on ${new Date().toLocaleDateString()} based on your personal trading history.`;

        // 5. Suformuoti atsakymą UI
        const finalResponse = {
            analysisSummary,
            newStrategyName,
            newStrategy
        };

        return NextResponse.json(finalResponse);

    } catch (error) {
        console.error('[API /strategies/generate] Error:', error);
        return NextResponse.json({ error: (error as Error).message || 'Internal Server Error' }, { status: 500 });
    }
}
